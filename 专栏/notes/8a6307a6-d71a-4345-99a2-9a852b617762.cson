createdAt: "2019-03-21T23:30:20.703Z"
updatedAt: "2019-03-21T23:53:01.787Z"
type: "MARKDOWN_NOTE"
folder: "6d7294932c2871f4527b"
title: "Internals - Consensus Protocol"
tags: []
content: '''
  # Internals - Consensus Protocol
  
  有限状态机-FSM是有限状态的集合，它们之间有转换。当应用新日志时，允许FSM在状态之间转换。应用相同的日志序列必须导致相同的状态，这意味着行为必须是确定性的。
  
  对等集-对等集是参与日志复制的所有成员的集。出于Consul的目的，所有服务器节点都在本地数据中心的对等集中。
  
  法定人数-法定人数是来自对等组的大多数成员：对于大小为n的组，法定人数要求至少（n/2）+1个成员。例如，如果对等集中有5个成员，则需要3个节点来构成仲裁。如果节点的仲裁因任何原因不可用，则群集将不可用，并且不能提交新的日志。
  
  提交条目-当一个条目被持久地存储在节点的仲裁上时，它被认为是提交的。一旦提交了一个条目，就可以应用它。
  
  领导-在任何给定的时间，对等集选择一个节点作为领导。领导者负责接收新的日志条目，复制到关注者，以及管理何时提交条目。
  
  raft是一个复杂的协议，这里不详细介绍（对于那些希望得到更全面治疗的人，本文提供了完整的规范）。然而，我们将尝试提供一个高层次的描述，这可能有助于建立一个心理模型。
  
  Raft节点总是处于三种状态之一：跟随者、候选者或领导者。所有节点最初都是从一个追随者开始的。在这种状态下，节点可以接受领导的日志条目并进行投票。如果一段时间内没有收到任何条目，则节点会自我提升到候选状态。在候选状态下，节点请求来自其对等节点的投票。如果一个候选人获得了法定人数的选票，那么他将被提升为领导人。领导者必须接受新的日志条目并复制到所有其他追随者。此外，如果不接受过时的读取，则还必须对领队执行所有查询。
  
  一旦集群有了一个领导者，它就能够接受新的日志条目。客户机可以请求领队附加一个新的日志条目（从raft的角度来看，日志条目是一个不透明的二进制blob）。然后，领导者将条目写入持久存储，并尝试复制到一个追随者群体中。一旦日志条目被认为是提交的，它就可以应用于有限状态机。有限状态机是特定于应用程序的；在Consul的情况下，我们使用memdb来维护集群状态。Consul的写入块，直到它被提交和应用为止。当与查询的一致模式一起使用时，这就实现了读后写语义。
  
  显然，不希望允许复制的日志以无限的方式增长。raft提供了一种机制，通过该机制可以捕捉当前状态并压缩日志。由于FSM抽象，恢复FSM的状态必须导致与重播旧日志相同的状态。这允许raft在某个时间点捕获FSM状态，然后删除用于达到该状态的所有日志。这是自动执行的，无需用户干预，并防止无限制的磁盘使用，同时也最大限度地减少了花在重放日志上的时间。使用memdb的一个优点是，它允许consul继续接受新的事务，即使在旧状态被快照时，也可以防止任何可用性问题。
  
  在达到法定人数之前，共识是容错的。如果节点的仲裁不可用，则无法处理日志条目或对等成员身份的原因。例如，假设只有2个对等端：A和B。仲裁大小也是2，这意味着两个节点必须同意提交一个日志条目。如果A或B中的任何一个失败，现在就不可能达到法定人数。这意味着集群无法添加或删除节点或提交任何其他日志条目。这导致不可用。此时，需要手动干预以删除a或b并在引导模式下重新启动其余节点。一个由3个节点组成的筏形集群可以承受单个节点故障，而一个由5个节点组成的集群可以承受2个节点故障。建议配置为每个数据中心运行3个或5个Consul服务器。这可以在不大幅牺牲性能的情况下最大限度地提高可用性。下面的部署表总结了潜在的集群大小选项和每个集群的容错性。在性能方面，RAFT与PAXOS相当。假设有稳定的领导，提交日志条目需要到集群的一半进行一次往返。因此，性能受磁盘I/O和网络延迟的限制。尽管Consul不是设计成一个高吞吐量的写系统，但它应该根据网络和硬件配置，以每秒数百到数千个事务的顺序来处理。»领事馆的木筏只有consul服务器节点参与raft，并且是对等集的一部分。所有客户端节点都转发要服务的请求
'''
linesHighlighted: []
isStarred: false
isTrashed: false
